## L'équipe de CPiN a développé un catalogue pour faciliter les opérations courantes sur les pipelines CI/CD
# - vault-ci.yaml
# - kaniko-ci.yaml
# - java-mvn.yaml
# - sonar-ci.yaml

# vault-ci:
## Récupération de différents secrets concernant le projet, entre autre l'URL du repo harbor
## Méthodes disponibles:
## - .vault:read_secret

# kaniko-ci:
## Build de l'image selon le Dockerfile trouvable dans le repo et stockage sur un registry:
## - docker (par défaut) 
## - ou harbor (si le stage .vault:read_secret a été executé avant)
## Méthodes disponibles:
## - .kaniko:build-push : build l'image avec ajout automatique de 3 tags: latest, nom de la branche, short sha du dernier commit
## - kaniko:simple-build-push : build de l'image, il est nécessaire de spécifier le tag à ajouter avec la variable TAG
#                               La variable REGISTRY_URL devra être positionner à ${IMAGE_REPOSITORY} ou un registry autre

# java-mvn:
## Construction des projets java via maven
## Méthodes disponibles:
## - .java:build : lance un build via maven
## - .java:sonar : lance un analyse sonar via maven

# sonar-ci:
## Méthodes disponibles:
## - .sonar:sonar-scanner : lance l'utilitaire sonar-scanner sur le projet

include:
  - project: $CATALOG_PATH
    file:
      - vault-ci.yml
      - kaniko-ci.yml
      # - java-mvn.yaml 
      # - sonar-ci
    ref: main

default:
  image: alpine:latest
#  tags:
#    - ADD_CUSTOM_TAG_HERE

cache:
  paths:
    - .m2/repository/
    - node_modules

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: ""
  MVN_CONFIG_FILE: $MVN_CONFIG
  TAG: "${CI_COMMIT_REF_SLUG}"
  DOCKERFILE: Dockerfile
  REGISTRY_URL: "${IMAGE_REPOSITORY}"


stages:
  - read-secret
  - docker-build

read_secret:
  stage: read-secret
  extends:
    - .vault:read_secret

docker-build:
  variables:
    WORKING_DIR: "."
    IMAGE_NAME: app-nginx-static-demo
  stage: docker-build
  extends:
    - .kaniko:build-push
